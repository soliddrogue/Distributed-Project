version: '3'

networks:
  my_network:


services:
  exchange-api-1:
    container_name: exchange-api-1
    build: "./Retro Video Game Exchange API"
    ports:
      - "3002:3001"
    depends_on:
      - mongo
      - kafka
    networks: 
      - my_network
    environment:
      NODE_ENV: production
      DATABASE_HOST: "mongodb://mongo:2717/"
      DATABASE_NAME: Games
      DATABASE_USER: savyab
      DATABASE_PASSWORD: megan2002
  exchange-api-2:
    container_name: exchange-api-2
    build: "./Retro Video Game Exchange API"
    ports:
      - "3003:3001"
    depends_on:
      - mongo
      - kafka
    networks: 
      - my_network
    environment:
      NODE_ENV: production
      DATABASE_HOST: "mongodb://mongo:2717/"
      DATABASE_NAME: Games
      DATABASE_USER: savyab
      DATABASE_PASSWORD: megan2002
  exchange-api-3:
    container_name: exchange-api-3
    build: "./Retro Video Game Exchange API"
    ports:
      - "3004:3001"
    depends_on:
      - mongo
      - kafka
    networks: 
      - my_network
    environment:
      NODE_ENV: production
      DATABASE_HOST: "mongodb://mongo:2717/"
      DATABASE_NAME: Games
      DATABASE_USER: savyab
      DATABASE_PASSWORD: megan2002

      
  mongo:
    container_name: mongo
    image: "mongo:latest"
    networks: 
      - my_network
    ports:
      - "2717:27017"
    volumes:
      - ./mongo:/data/db

    

  nginx:
    container_name: ngnix-api
    image: nginx:latest
    volumes: 
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks: 
      - my_network
    ports:
      - "80:80"



  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    networks: 
      - my_network
    ports:
      - 22181:2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "29092"
    depends_on:
      - zookeeper
    networks: 
      - my_network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ALLOW_PLAINTEXT_LISTEN: yes
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka_exporter:
    container_name: kafka_exporter
    depends_on: 
    - kafka
    image: bitnami/kafka-exporter
    ports: 
    - 9303:9308
    networks: 
      - my_network
    command:
    - "--kafka.server=kafka:9092"
    - "--zookeeper.server=zookeeper:2181"




  emailservice:
    build: "./emailService"
    depends_on: 
      - kafka
    networks: 
      - my_network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ALLOW_PLAINTEXT_LISTEN: yes
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  prometheus:
    image: my-prometheus-image
    build: ./prometheus
    networks: 
      - my_network
    ports:
      - "9090:9090"
    volumes:
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  
    
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks: 
      - my_network
    volumes:
      - ./grafana:/var/lib/grafana

